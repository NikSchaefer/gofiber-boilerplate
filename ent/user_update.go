// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NikSchaefer/go-fiber/ent/account"
	"github.com/NikSchaefer/go-fiber/ent/otp"
	"github.com/NikSchaefer/go-fiber/ent/predicate"
	"github.com/NikSchaefer/go-fiber/ent/profile"
	"github.com/NikSchaefer/go-fiber/ent/session"
	"github.com/NikSchaefer/go-fiber/ent/user"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdate) SetEmailVerified(v bool) *UserUpdate {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmailVerified(v *bool) *UserUpdate {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *UserUpdate) SetPhoneNumber(v string) *UserUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhoneNumber(v *string) *UserUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *UserUpdate) ClearPhoneNumber() *UserUpdate {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetPhoneNumberVerified sets the "phone_number_verified" field.
func (_u *UserUpdate) SetPhoneNumberVerified(v bool) *UserUpdate {
	_u.mutation.SetPhoneNumberVerified(v)
	return _u
}

// SetNillablePhoneNumberVerified sets the "phone_number_verified" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhoneNumberVerified(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPhoneNumberVerified(*v)
	}
	return _u
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (_u *UserUpdate) AddAccountIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddAccountIDs(ids...)
	return _u
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (_u *UserUpdate) AddAccounts(v ...*Account) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAccountIDs(ids...)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *UserUpdate) SetProfileID(id uuid.UUID) *UserUpdate {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableProfileID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		_u = _u.SetProfileID(*id)
	}
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *UserUpdate) SetProfile(v *Profile) *UserUpdate {
	return _u.SetProfileID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdate) AddSessionIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdate) AddSessions(v ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddOtpIDs adds the "otps" edge to the OTP entity by IDs.
func (_u *UserUpdate) AddOtpIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddOtpIDs(ids...)
	return _u
}

// AddOtps adds the "otps" edges to the OTP entity.
func (_u *UserUpdate) AddOtps(v ...*OTP) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOtpIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (_u *UserUpdate) ClearAccounts() *UserUpdate {
	_u.mutation.ClearAccounts()
	return _u
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (_u *UserUpdate) RemoveAccountIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveAccountIDs(ids...)
	return _u
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (_u *UserUpdate) RemoveAccounts(v ...*Account) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAccountIDs(ids...)
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *UserUpdate) ClearProfile() *UserUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdate) ClearSessions() *UserUpdate {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdate) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdate) RemoveSessions(v ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearOtps clears all "otps" edges to the OTP entity.
func (_u *UserUpdate) ClearOtps() *UserUpdate {
	_u.mutation.ClearOtps()
	return _u
}

// RemoveOtpIDs removes the "otps" edge to OTP entities by IDs.
func (_u *UserUpdate) RemoveOtpIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveOtpIDs(ids...)
	return _u
}

// RemoveOtps removes "otps" edges to OTP entities.
func (_u *UserUpdate) RemoveOtps(v ...*OTP) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOtpIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumberVerified(); ok {
		_spec.SetField(user.FieldPhoneNumberVerified, field.TypeBool, value)
	}
	if _u.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !_u.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OtpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOtpsIDs(); len(nodes) > 0 && !_u.mutation.OtpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OtpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdateOne) SetEmailVerified(v bool) *UserUpdateOne {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmailVerified(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *UserUpdateOne) SetPhoneNumber(v string) *UserUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhoneNumber(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetPhoneNumberVerified sets the "phone_number_verified" field.
func (_u *UserUpdateOne) SetPhoneNumberVerified(v bool) *UserUpdateOne {
	_u.mutation.SetPhoneNumberVerified(v)
	return _u
}

// SetNillablePhoneNumberVerified sets the "phone_number_verified" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhoneNumberVerified(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPhoneNumberVerified(*v)
	}
	return _u
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (_u *UserUpdateOne) AddAccountIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddAccountIDs(ids...)
	return _u
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (_u *UserUpdateOne) AddAccounts(v ...*Account) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAccountIDs(ids...)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (_u *UserUpdateOne) SetProfileID(id uuid.UUID) *UserUpdateOne {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProfileID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		_u = _u.SetProfileID(*id)
	}
	return _u
}

// SetProfile sets the "profile" edge to the Profile entity.
func (_u *UserUpdateOne) SetProfile(v *Profile) *UserUpdateOne {
	return _u.SetProfileID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdateOne) AddSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdateOne) AddSessions(v ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddOtpIDs adds the "otps" edge to the OTP entity by IDs.
func (_u *UserUpdateOne) AddOtpIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddOtpIDs(ids...)
	return _u
}

// AddOtps adds the "otps" edges to the OTP entity.
func (_u *UserUpdateOne) AddOtps(v ...*OTP) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOtpIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (_u *UserUpdateOne) ClearAccounts() *UserUpdateOne {
	_u.mutation.ClearAccounts()
	return _u
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (_u *UserUpdateOne) RemoveAccountIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveAccountIDs(ids...)
	return _u
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (_u *UserUpdateOne) RemoveAccounts(v ...*Account) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAccountIDs(ids...)
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (_u *UserUpdateOne) ClearProfile() *UserUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdateOne) ClearSessions() *UserUpdateOne {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdateOne) RemoveSessions(v ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearOtps clears all "otps" edges to the OTP entity.
func (_u *UserUpdateOne) ClearOtps() *UserUpdateOne {
	_u.mutation.ClearOtps()
	return _u
}

// RemoveOtpIDs removes the "otps" edge to OTP entities by IDs.
func (_u *UserUpdateOne) RemoveOtpIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveOtpIDs(ids...)
	return _u
}

// RemoveOtps removes "otps" edges to OTP entities.
func (_u *UserUpdateOne) RemoveOtps(v ...*OTP) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOtpIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumberVerified(); ok {
		_spec.SetField(user.FieldPhoneNumberVerified, field.TypeBool, value)
	}
	if _u.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !_u.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OtpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOtpsIDs(); len(nodes) > 0 && !_u.mutation.OtpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OtpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtpsTable,
			Columns: []string{user.OtpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otp.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
