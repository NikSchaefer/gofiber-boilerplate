// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NikSchaefer/go-fiber/ent/predicate"
	"github.com/NikSchaefer/go-fiber/ent/profile"
	"github.com/NikSchaefer/go-fiber/ent/user"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (_u *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProfileUpdate) SetUpdatedAt(v time.Time) *ProfileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ProfileUpdate) SetName(v string) *ProfileUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProfileUpdate) SetNillableName(v *string) *ProfileUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *ProfileUpdate) SetAvatarURL(v string) *ProfileUpdate {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *ProfileUpdate) SetNillableAvatarURL(v *string) *ProfileUpdate {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *ProfileUpdate) ClearAvatarURL() *ProfileUpdate {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetAvatarKey sets the "avatar_key" field.
func (_u *ProfileUpdate) SetAvatarKey(v string) *ProfileUpdate {
	_u.mutation.SetAvatarKey(v)
	return _u
}

// SetNillableAvatarKey sets the "avatar_key" field if the given value is not nil.
func (_u *ProfileUpdate) SetNillableAvatarKey(v *string) *ProfileUpdate {
	if v != nil {
		_u.SetAvatarKey(*v)
	}
	return _u
}

// ClearAvatarKey clears the value of the "avatar_key" field.
func (_u *ProfileUpdate) ClearAvatarKey() *ProfileUpdate {
	_u.mutation.ClearAvatarKey()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *ProfileUpdate) SetBirthday(v time.Time) *ProfileUpdate {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *ProfileUpdate) SetNillableBirthday(v *time.Time) *ProfileUpdate {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *ProfileUpdate) ClearBirthday() *ProfileUpdate {
	_u.mutation.ClearBirthday()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProfileUpdate) SetUserID(id int) *ProfileUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProfileUpdate) SetUser(v *User) *ProfileUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (_u *ProfileUpdate) Mutation() *ProfileMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProfileUpdate) ClearUser() *ProfileUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProfileUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProfileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProfileUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProfileUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := profile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Profile.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarURL(); ok {
		if err := profile.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "Profile.avatar_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarKey(); ok {
		if err := profile.AvatarKeyValidator(v); err != nil {
			return &ValidationError{Name: "avatar_key", err: fmt.Errorf(`ent: validator failed for field "Profile.avatar_key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (_u *ProfileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(profile.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(profile.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarKey(); ok {
		_spec.SetField(profile.FieldAvatarKey, field.TypeString, value)
	}
	if _u.mutation.AvatarKeyCleared() {
		_spec.ClearField(profile.FieldAvatarKey, field.TypeString)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(profile.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(profile.FieldBirthday, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProfileUpdateOne) SetUpdatedAt(v time.Time) *ProfileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ProfileUpdateOne) SetName(v string) *ProfileUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProfileUpdateOne) SetNillableName(v *string) *ProfileUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *ProfileUpdateOne) SetAvatarURL(v string) *ProfileUpdateOne {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *ProfileUpdateOne) SetNillableAvatarURL(v *string) *ProfileUpdateOne {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *ProfileUpdateOne) ClearAvatarURL() *ProfileUpdateOne {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetAvatarKey sets the "avatar_key" field.
func (_u *ProfileUpdateOne) SetAvatarKey(v string) *ProfileUpdateOne {
	_u.mutation.SetAvatarKey(v)
	return _u
}

// SetNillableAvatarKey sets the "avatar_key" field if the given value is not nil.
func (_u *ProfileUpdateOne) SetNillableAvatarKey(v *string) *ProfileUpdateOne {
	if v != nil {
		_u.SetAvatarKey(*v)
	}
	return _u
}

// ClearAvatarKey clears the value of the "avatar_key" field.
func (_u *ProfileUpdateOne) ClearAvatarKey() *ProfileUpdateOne {
	_u.mutation.ClearAvatarKey()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *ProfileUpdateOne) SetBirthday(v time.Time) *ProfileUpdateOne {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *ProfileUpdateOne) SetNillableBirthday(v *time.Time) *ProfileUpdateOne {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *ProfileUpdateOne) ClearBirthday() *ProfileUpdateOne {
	_u.mutation.ClearBirthday()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProfileUpdateOne) SetUserID(id int) *ProfileUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProfileUpdateOne) SetUser(v *User) *ProfileUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (_u *ProfileUpdateOne) Mutation() *ProfileMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ProfileUpdate builder.
func (_u *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Profile entity.
func (_u *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProfileUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProfileUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := profile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Profile.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarURL(); ok {
		if err := profile.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "Profile.avatar_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarKey(); ok {
		if err := profile.AvatarKeyValidator(v); err != nil {
			return &ValidationError{Name: "avatar_key", err: fmt.Errorf(`ent: validator failed for field "Profile.avatar_key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (_u *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(profile.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(profile.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarKey(); ok {
		_spec.SetField(profile.FieldAvatarKey, field.TypeString, value)
	}
	if _u.mutation.AvatarKeyCleared() {
		_spec.ClearField(profile.FieldAvatarKey, field.TypeString)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(profile.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(profile.FieldBirthday, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
